{"prompt": "how to add workflow id in create_schedule as search_attributes in python sdk?", "response": "To add a workflow id as a search attribute when creating a schedule in the Temporal Python SDK, you can use the `create_schedule()` method on the Client object. The `search_attributes` parameter of this method allows you to specify search attributes for the schedule.\n\nHere is a sample code snippet on how to use it:\n\n```python\nawait client.create_schedule(  \n \"workflow-schedule-id\",  \n Schedule(  \n action=ScheduleActionStartWorkflow(  \n YourSchedulesWorkflow.run,  \n \"my schedule arg\",  \n id=\"schedules-workflow-id\",  \n task_queue=\"schedules-task-queue\",  \n ),  \n spec=ScheduleSpec(  \n intervals=[ScheduleIntervalSpec(every=timedelta(minutes=2))]  \n ),  \n state=ScheduleState(note=\"Here's a note on my Schedule.\"),  \n search_attributes={\"WorkflowId\": \"schedules-workflow-id\"},\n ),  \n)  \n```\n\nIn this example, the `search_attributes` parameter is set to a dictionary with the key \"WorkflowId\" and the value as the id of the workflow. Replace \"schedules-workflow-id\" with your actual workflow id.\n\nPlease note that you need to have the search attribute \"WorkflowId\" created in your Temporal cluster before you can use it. You can create a new search attribute in your cluster using the CLI or Web UI. For example:\n\n```bash\ntemporal operator search-attribute create --name WorkflowId --type Text\n```\n\nFor more information, you can refer to the [Temporal documentation](https://docs.temporal.io/dev-guide/python/observability#search-attributes) and the [Python SDK reference](https://python.temporal.io/temporalio.client.Client.html#create_schedule)."}
{"prompt": "how to schedule a workflow for an specific datetime that runs once in python sdk?", "response": "To schedule a Temporal workflow for a specific datetime once in Python, you can use the `create_schedule()` function provided by Temporal\u2019s Python SDK. Here's a step-by-step guide:\n\n1. First, create a new file, for example, `schedule_workflow.py`.\n2. Import the necessary modules and your workflow. Here\u2019s an example:\n```python\nimport asyncio \nfrom datetime import timedelta \n\nfrom temporalio.client import ( \n Client, \n Schedule, \n ScheduleActionStartWorkflow, \n ScheduleIntervalSpec, \n ScheduleSpec, \n ScheduleState, \n) \n\nfrom activities import TASK_QUEUE_NAME \nfrom your_workflow import TemporalCommunityWorkflow\n```\n3. Define your main function and connect to the Temporal client:\n```python\nasync def main(): \n client = await Client.connect(\"localhost:7233\")\n```\n4. Use the `create_schedule()` function on the Client and pass a unique identifier for the Schedule. This identifier can be a business process identifier, for example, `temporal-community-workflow`. It\u2019s crucial for each Schedule to have a unique identifier to avoid conflicts and ensure clear identification.\n5. Use the Schedule class on the Client to set the Schedule action and spec. The Schedule provides a solution to running your actions periodically. The spec determines when the action is taken.\n6. In `create_schedule`, set an interval timer, for example, `every=timedelta(hours=10)`. While this tutorial uses an interval timer, you can set a cron expression, calendars, and more to run your Workflow.\n\nPlease note that the above example sets the workflow to run every 10 hours. If you want to run the workflow only once at a specific datetime, you would need to calculate the timedelta from the current time to the specific datetime you want the workflow to run.\n\nFor more details, you can refer to the [Temporal documentation](https://docs.temporal.io/dev-guide/python/features#schedule-a-workflow) and [Temporal tutorials](https://learn.temporal.io/tutorials/python/data-pipelines#schedule-a-workflow-to-run-on-a-specific-interval).\n\nPlease note that the exact method to schedule a workflow for a specific datetime once is not explicitly mentioned in the provided extracts. The provided information is based on the available extracts and general knowledge of scheduling workflows in Temporal."}
{"prompt": "how to schedule temporal for specific datetime once in python?", "response": "To schedule a Temporal workflow for a specific datetime once in Python, you can use the `create_schedule()` function provided by Temporal\u2019s Python SDK. Here's a step-by-step guide:\n\n1. First, create a new file, for example, `schedule_workflow.py`.\n2. Import the necessary modules and your workflow. Here\u2019s an example:\n```python\nimport asyncio \nfrom datetime import timedelta \n\nfrom temporalio.client import ( \n Client, \n Schedule, \n ScheduleActionStartWorkflow, \n ScheduleIntervalSpec, \n ScheduleSpec, \n ScheduleState, \n) \n\nfrom activities import TASK_QUEUE_NAME \nfrom your_workflow import TemporalCommunityWorkflow\n```\n3. Define your main function and connect to the Temporal client:\n```python\nasync def main(): \n client = await Client.connect(\"localhost:7233\")\n```\n4. Use the `create_schedule()` function on the Client and pass a unique identifier for the Schedule. This identifier can be a business process identifier, for example, `temporal-community-workflow`. It\u2019s crucial for each Schedule to have a unique identifier to avoid conflicts and ensure clear identification.\n5. Use the Schedule class on the Client to set the Schedule action and spec. The Schedule provides a solution to running your actions periodically. The spec determines when the action is taken.\n6. In `create_schedule`, set an interval timer, for example, `every=timedelta(hours=10)`. While this tutorial uses an interval timer, you can set a cron expression, calendars, and more to run your Workflow.\n\nPlease note that the above example sets the workflow to run every 10 hours. If you want to run the workflow only once at a specific datetime, you would need to calculate the timedelta from the current time to the specific datetime you want the workflow to run.\n\nFor more details, you can refer to the [Temporal documentation](https://docs.temporal.io/dev-guide/python/features#schedule-a-workflow) and [Temporal tutorials](https://learn.temporal.io/tutorials/python/data-pipelines#schedule-a-workflow-to-run-on-a-specific-interval).\n\nPlease note that the exact method to schedule a workflow for a specific datetime once is not explicitly mentioned in the provided extracts. The provided information is based on the available extracts and general knowledge of scheduling workflows in Temporal."}
